#! /usr/bin/env python

from OVarCall.run import *
import argparse

#
# top level parser
#
parser = argparse.ArgumentParser(prog="OVarCall")
parser.add_argument("--version", action="version", version="OVarCall-0.1.1")

parser.add_argument('-1', '--bam1', help='1st bam file ( disease )', type=str, default=None, required=True)
parser.add_argument('-2', '--bam2', help='2nd bam file ( control )', type=str, default=None, required=True)
parser.add_argument('-o', '--output', help='Output text file', type=str, default=None, required=True)
parser.add_argument('-r', '--ref_fa', help='Reference genome in fasta format', type=str, default=None, required=True)
parser.add_argument('-s', '--samtools_path', type=str, default=None, required=True)
parser.add_argument('-p', '--parameter_settings', help="parameter settings path (.ini) ", type=str, default=None,required=True)
parser.add_argument('-R', '--region', help='region in which pileup is generated', type=str, default=None)
parser.add_argument('-l', '--log_level', help="Logging level", type=str, default='INFO')


####################
  #
  # logging setup
  #
  # Level     function            value    description
  # CRITICAL  logging.critical()  50      Output only critical errors
  # ERROR     logging.error()     40      Output errors
  # WARNING   logging.warning()   30      Output warnings
  # INFO      logging.info()      20      Output information
  # DEBUG     logging.debug()     10      Output debug information
  # NOTSET                        0       Output all
  #
####################
args = parser.parse_args()

runOVar(args)
